from stack import Stack 
from graph import Graph

def topologic_sort(G):
	if G is None: return []

	S = Stack()
	for vertice in G.get_nodes():
		if G.get_nodes()[vertice].get_in_degree() == 0: S.add_stack(vertice)
	
	t = 0
	s = []
	while(S.isEmpty() != True):
		v = S.pop_stack()
		
		G.get_nodes()[v].insert_sort(t)
		t = t + 1
		
		s.append(G.get_nodes()[v].get_content())
		for neighbor in G.get_nodes()[v].get_neighbors():
			G.get_nodes()[neighbor].pop_in_degree(1)
			if G.get_nodes()[neighbor].get_in_degree() == 0: S.add_stack(neighbor)

	return s
	

graph_base = Graph()

#vertices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]

#tuples = { (0, 2), (0, 3), (0, 4), (0, 5), (0, 13), (0, 14), (0, 15), (0, 19), (0, 20), (0, 25), (0, 26), (0, 27), (0, 28), (0, 29), (1, 5), (1, 7), (1, 9), (1, 11), (1, 25), (2, 6), (2, 8), (2, 10), (2, 11), (2, 13), (2, 16), (2, 19), (2, 20), (2, 21), (2, 24), (2, 29), (3, 4), (3, 6), (3, 7), (3, 10), (3, 11), (3, 12), (3, 13), (3, 18), (3, 19), (3, 21), (4, 5), (4, 6), (4, 8), (4, 9), (4, 16), (4, 17), (4, 20), (4, 22), (4, 28), (5, 10), (5, 13), (5, 14), (5, 21), (5, 22), (5, 25), (5, 26), (6, 7), (6, 8), (6, 9), (6, 10), (6, 12), (6, 14), (6, 15), (6, 20), (6, 23), (6, 25), (6, 26), (7, 9), (7, 10), (7, 12), (7, 13), (7, 14), (7, 15), (7, 17), (7, 19), (7, 20), (7, 21), (7, 23), (7, 24), (7, 27), (8, 16), (8, 20), (8, 22), (8, 25), (9, 10), (9, 12), (9, 19), (9, 21), (9, 22), (9, 23), (9, 25), (9, 26), (9, 28), (10, 13), (10, 25), (10, 27), (10, 29), (11, 16), (11, 18), (11, 19), (11, 22), (11, 23), (11, 24), (11, 25), (11, 26), (11, 27), (12, 15), (12, 18), (12, 20), (13, 17), (13, 28), (14, 21), (14, 25), (15, 17), (15, 20), (16, 18), (16, 27), (17, 19), (17, 21), (17, 24), (17, 25), (17, 26), (18, 22), (18, 23), (18, 24), (19, 21), (19, 23), (19, 24), (19, 29), (20, 21), (20, 23), (23, 27), (24, 26), (26, 29), (27, 28)}

vertices = [0,1,2,3]

tuples = { (0,1), (1,2), (2,0), (1,3)}

graph_base.build_graph(vertices, tuples)

print(topologic_sort(graph_base))
